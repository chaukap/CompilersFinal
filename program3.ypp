%{
#include <iostream>
#include "node.hpp"
#include <FlexLexer.h>
using namespace std;

extern Node *tree;
extern yyFlexLexer scanner;

#define yylex() scanner.yylex()

void yyerror(const char *);
%}

%union {
  Node *ttype;
}

%type<ttype> program
%type<ttype> exp
%token<ttype> NUM
%token COMMA
%token DOT
%token RPAREN
%token LPAREN
%token LBRACK
%token RBRACK
%token LBRACE
%token RBRACE
%token NEQ
%token EQ
%token LT
%token GT
%token LEQ
%token GEQ
%token AND
%token OR
%token NOT
%token PLUS
%token MINUS
%token TIMES
%token DIV
%token MOD
%token SEMI
%token ASSIGN
%token COMMENT
%token INT
%token VOID
%token CLASS
%token NEW
%token PRINT
%token READ
%token RETURN
%token ELSE
%token NULLT
%token THIS
%token IF
%token WHILE
%token IDENT
%token ER_CH
%token ER_WD
%token ERRORS
%token IGNORE

%% /* Grammar rules and actions follow. */
input:  
program             {
                /* 
                 * We have reached the end of the input and
                 * now we are passing the results to the main function.
                 */
                tree=$1;
                // cout << "DONE: " << $1->getint() << endl;
                }
;

program:
exp SEMI            {
                    $$=new Node($1);
                    }
| program exp SEMI  {
                    $$=new Node($1,$2);
                    }
;

exp:
NUM 		        {       
                $$=new nodeNum($1->getint()); delete $1; 
                }
| exp PLUS exp  { 
                // cout << "e + e : ";
                // cout << $1->getint() << " + " << $3->getint() << endl; 
                $$=new Node($1,$3);
                $$->setval(" + ");
                }
| exp MINUS exp { 
                // cout << "e - e : ";
                // cout << $1->getint() << " - " << $3->getint() << endl; 
                $$=new Node($1,$3);
                $$->setval(" - ");
                }
| exp TIMES exp { 
                // cout << "e * e : ";
                // cout << $1->getint() << " * " << $3->getint() << endl; 
                $$=new Node($1,$3);
                $$->setval(" * ");
                }
| exp DIV exp   { 
                // cout << "e / e : ";
                // cout << $1->getint() << " / " << $3->getint() << endl; 
                $$=new Node($1,$3);
                $$->setval(" / ");
                }
| MINUS exp     { 
                // cout << "- e : " << $2->getint() << endl;       
                $$=new nodeMinus($2);
                }
| LPAREN exp RPAREN { 
                    // cout << "(e) :" << $2->getint() << endl;        
                    $$=new nodeParExp($2);
                    }
| exp GT exp    {
                $$=new nodeComparatorExp(
                  nodeComparatorExp::Comparator::GT, $1, $3);
                }
| exp LT exp    {
                $$=new nodeComparatorExp(
                  nodeComparatorExp::Comparator::LT, $1, $3);
                }
| exp EQ exp    {
                $$=new nodeComparatorExp(
                  nodeComparatorExp::Comparator::EQ, $1, $3);
                }
| exp NEQ exp   {
                $$=new nodeComparatorExp(
                  nodeComparatorExp::Comparator::NEQ, $1, $3);
                }
| exp LEQ exp   {
                $$=new nodeComparatorExp(
                  nodeComparatorExp::Comparator::LEQ, $1, $3);
                }
| exp GEQ exp   {
                $$=new nodeComparatorExp(
                  nodeComparatorExp::Comparator::GEQ, $1, $3);
                }
;
%%
