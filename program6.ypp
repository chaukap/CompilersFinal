/* program6.ypp
 * Chandler Haukap
 * 10/24/19
 * COSC 4785
 *  
 * Bison file. 
 */

%{
#include <iostream>
#include "node.hpp"
#include <FlexLexer.h>
#include "symbolTable.hpp"
#include <queue>
#include <stack>

using namespace std;

extern queue<Node*> classes;
extern stack<string> derivations;
extern yyFlexLexer scanner;
extern int row;
extern int column;

#define yylex() scanner.yylex()
#define yytext() scanner.YYText()

void yyerror(const char *);
%}

%union {
  Node *ttype;
}

%type<ttype> program exp vardec type classDeclaration classBody
%type<ttype> identifier name bracketexp bracketexps multibrackets newexp
%type<ttype> varDeclarations LocalVarDec ConstructorDeclarations
%type<ttype> ConstructorDeclaration temp MethodDeclarations MethodDeclaration 
%type<ttype> LocalVarDecs Block Statement Statements ConditionalStatement
%type<ttype> Arglist Parameter ParameterList OptionalExpression newType
%type<ttype> identifierSemi paramList ParametersAndBlock InnerBlock
%type<ttype> MoreParameters UnaryOp
%token<ttype> NUM SEMI
%precedence NOT
%left NEQ EQ LT GT LEQ GEQ AND OR PLUS MINUS TIMES DIV MOD
%token INT IDENT COMMA DOT LPAREN RPAREN LBRACK RBRACK LBRACE RBRACE IF
%token ASSIGN COMMENT VOID CLASS NEW PRINT READ RETURN ELSE NULLT THIS WHILE
%token ER_CH ER_WD ERRORS IGNORE

%% /* Grammar rules and actions follow. */
input:  
program         {
                derivations.push("<input> --> <program>");
                }
;

program:
classDeclaration            {
                            classes.push($1);
                            derivations.push("<program> --> <classDeclaration>");
                            }      
| program classDeclaration  {
                            classes.push($2);
                            derivations.push("<program> --> <program> <classDeclaration>");
                            }
;

classDeclaration:
CLASS identifier LBRACE classBody RBRACE  {
                                          $$=new NodeClass($2, $4);
                                          derivations.push("<classDeclaration> --> "
                                                           "CLASS <identifier> LBRACE "
                                                           "<classBody> RBRACE");
                                          }
| CLASS identifier LBRACE RBRACE          {
                                          $$=new NodeClass($2, 0);
                                          derivations.push("<classDeclaration> --> "
                                                           "CLASS <identifier> LBRACE "
                                                           "RBRACE");
                                          }
| CLASS identifier error                  {
                                          cout << "(" << row << ", " << column
                                               << ") Error in class";
                                          $2->prettyPrint(&cout);
                                          $$=new NodeError(); // prevent a seg fault.
                                          }
| CLASS error                             {
                                          cout << "(" << row << ", " << column
                                               << ") Poorly defined class " 
                                               << endl;
                                          $$=new NodeError(); // prevent a seg fault.
                                          }
;

classBody:
varDeclarations ConstructorDeclarations MethodDeclarations  {
                                                            $$=new NodeClassBody($1, 
                                                                            $2, $3);
                                                            derivations.push("<classBody> --> "
                                                                             "<varDeclarations> "
                                                                             "<ConstructorDeclarations> "
                                                                             "<MethodDeclarations>");
                                                            }
| MethodDeclarations                          {
                                              $$=new NodeClassBody(0, 0, $1);
                                              derivations.push("<classBody> --> "
                                                               "<MethodDeclarations>");
                                              }
| varDeclarations                             {
                                              $$=new NodeClassBody($1);
                                              derivations.push("<classBody> --> <varDeclarations>");
                                              }
| varDeclarations ConstructorDeclarations     {
                                              $$=new NodeClassBody($1, $2);
                                              derivations.push("<classBody> --> "
                                                               "<varDeclarations> "
                                                               "<ConstructorDeclarations>");
                                              }
| ConstructorDeclarations                     {
                                              $$=new NodeClassBody(0, $1);
                                              derivations.push("<classBody> --> "
                                                               "<ConstructorDeclarations>");
                                              }
| ConstructorDeclarations MethodDeclarations  {
                                              $$=new NodeClassBody(0, $1, $2);
                                              derivations.push("<classBody> --> "
                                                               "<ConstructorDeclarations> "
                                                               "<MethodDeclarations>");
                                              }
| varDeclarations MethodDeclarations          {
                                              $$=new NodeClassBody($1, 0, $2);
                                              derivations.push("<classBody> --> "
                                                               "<varDeclarations> "
                                                               "<MethodDeclarations>");
                                              }                                          
;

varDeclarations:
vardec                    {
                          $$=$1;
                          derivations.push("<varDeclarations> --> <vardec>");
                          }
| varDeclarations vardec  {
                          $$=new Node($1, $2);
                          derivations.push("<varDeclarations> --> <varDeclarations> <vardec>");
                          }
| varDeclarations error   {
                          cout << "(" << row << ", " << column << ")"
                               << " Bad variable declaration around ("
                               << yytext() << ")" << endl;
                          }                   
;

ConstructorDeclarations:
ConstructorDeclaration                            {
                                                  $$=$1;
                                                  derivations.push("<ConstructorDeclarations> --> "
                                                                   "<ConstructorDeclaration>");
                                                  }  
| ConstructorDeclarations ConstructorDeclaration  {
                                                  $$=new Node($1, $2);
                                                  derivations.push("<ConstructorDeclarations> --> "
                                                                   "<ConstructorDeclarations> "
                                                                   "<ConstructorDeclaration>");
                                                  }
;

ConstructorDeclaration:
identifier LPAREN ParametersAndBlock  {
                                      $$=new NodeConstructorDec($1, $3);
                                      derivations.push("<ConstructorDeclaration> --> <identifier> "
                                                       "LPAREN <ParameterList> RPAREN <Block>");

                                      }
;

MethodDeclarations:
MethodDeclaration                     {
                                      $$=$1;
                                      derivations.push("<MethodDeclarations> --> <MethodDeclaration>");
                                      }
| MethodDeclarations MethodDeclaration{
                                      $$=new Node($1, $2);
                                      derivations.push("<MethodDeclarations> --> <MethodDeclarations> "
                                                       "<MethodDeclaration>");
                                      }
;

// I need this to avoid Constructor / Method conflicts
temp:
identifier LPAREN ParametersAndBlock  {
                                      $$=new NodeTemp($1, $3);
                                      }
;

MethodDeclaration:
type temp     {
              $$=new NodeMethodDec($1, $2);
              derivations.push("<MethodDeclaration> --> "
                               "<ResultType> <identifier> "
                               "LPAREN <ParameterList> RPAREN <Block>");
              }
| VOID temp   {
              $$=new NodeMethodDec(0, $2);
              derivations.push("<MethodDeclaration> --> "
                               "VOID <identifier> "
                               "LPAREN <ParameterList> RPAREN <Block>");
              }
;

/* Returns a regular node. If LEFT is NULL, there is no parameter list. */
ParametersAndBlock:
ParameterList RPAREN Block  {
                            $$=new NodeParamListAndBlock($1, $3);
                            }
| RPAREN Block              {
                            derivations.push("<ParameterList --> EMPTY");
                            $$=new NodeParamListAndBlock(0, $2);
                            }
;


ParameterList:
Parameter                         {
                                  derivations.push("<ParameterList> --> <Parameter>");
                                  $$=$1;
                                  }
| Parameter MoreParameters        {
                                  $$=new NodeParameterList($1, $2);
                                  derivations.push("<ParameterList> --> <Parameter> "
                                                   "<MoreParameters>");
                                  }
;

MoreParameters:
COMMA Parameter                   {
                                  $$=$2;
                                  derivations.push("<MoreParameters> --> COMMA <Parameter>");
                                  }
| COMMA Parameter MoreParameters  {
                                  $$=new NodeParameterList($2, $3);
                                  derivations.push("<MoreParameters> --> COMMA <Parameter> "
                                                   "<MoreParameters>");
                                  }
;

Parameter:
type identifier {
                $$=new NodeParameter($1, $2);
                derivations.push("<Parameter> --> <type> <identifier>");
                }
;

vardec:
type identifierSemi                   {
                                      $$=new nodeVardec($1,$2);
                                      derivations.push("<vardec> --> <type> "
                                                       "<multibrackets> "
                                                       "<identifierSemi>");
                                      }
;

identifierSemi:
identifier SEMI   {
                  derivations.push("<identifierSemi> --> <identifier> SEMI");
                  $$=$1;
                  }
;

Block:
LBRACE InnerBlock RBRACE  {
                          derivations.push("<Block> --> LBRACE <InnerBlock> RBRACE");
                          $$=new NodeBlock($2);
                          }
| LBRACE RBRACE           {
                          $$=0;
                          derivations.push("<Block> --> LBRACE RBRACE");
                          }
;

/* Returns a Node. LEFT is the LocalVarDecs and RIGHT is the Statements.
 * Either or could be NULL. */
InnerBlock:
LocalVarDecs              {
                          $$=new Node($1);
                          derivations.push("<InnerBlock> --> <LocalVardecs>");
                          }
| Statements              {
                          $$=new Node(0, $1);
                          derivations.push("<InnerBlock> --> <Statements>");
                          }
| LocalVarDecs Statements {
                          $$=new Node($1, $2);
                          derivations.push("<InnerBlock> --> <LocalVarDecs> "
                                           "<Statements>");
                          }
;

LocalVarDecs:
LocalVarDec                 {
                            $$=$1;
                            derivations.push("<LocalVardecs> --> <LocalVarDec>");
                            }
| LocalVarDecs LocalVarDec  {
                            $$=new Node($1, $2);
                            derivations.push("<LocalVarDecs> --> <LocalVarDecs> "
                                             "<LocalVarDec>");
                            }
;

Statements:
Statement             {
                      $$=$1;
                      derivations.push("<Statements> --> <Statement>");
                      }
| Statements Statement{
                      $$=new Node($1, $2);
                      derivations.push("<Statements> --> <Statements> <Statement>");
                      }
;

Statement:
name ASSIGN exp SEMI                {
                                    $$=new NodeAssign($1, $3);
                                    derivations.push("<Statement> --> <name> "
                                                     "ASSIGN <exp> SEMI");
                                    }
| name paramList SEMI               {
                                    $$=new NodeFunct($1, $2);
                                    derivations.push("<Statement> --> <name> "
                                                     "<paramList> SEMI");
                                    }
| PRINT paramList SEMI              {
                                    $$=new NodePrint($2);
                                    derivations.push("<Statement> --> PRINT "
                                                     "<paramList> SEMI");
                                    }
| ConditionalStatement              {
                                    $$=$1;
                                    derivations.push("<Statement> --> "
                                                     "<ConditionalStatement>");
                                    }
| WHILE LPAREN exp RPAREN Statement {
                                    $$=new NodeWhile($3, $5);
                                    derivations.push("<Statement> --> WHILE "
                                                     "LPAREN <exp> RPAREN "
                                                     "<Statement>");
                                    }
| RETURN OptionalExpression         {
                                    $$=new NodeOptional($2);
                                    derivations.push("<Statement> --> RETURN "
                                                     "<OptionalExpressions>");
                                    }
| Block                             {
                                    $$=$1;
                                    derivations.push("<Statement> --> <Block>");
                                    }
| SEMI                              {
                                    derivations.push("<Statement> --> SEMI");
                                    }
;

LocalVarDec:
type identifier SEMI  {
                      $$=new nodeVardec($1, $2);
                      derivations.push("<LocalVarDec> --> <type> "
                                       "<identifier> SEMI");
                      }
;

Arglist:
exp                 {
                    $$=new Node(0, $1);
                    derivations.push("<Arglist> --> <exp>");
                    }
| Arglist COMMA exp {
                    $$=new Node($1, $3);
                    derivations.push("<Arglist> --> <Arglist> COMMA <exp>");
                    }
;

OptionalExpression:
SEMI        {
            $$=0;
            derivations.push("<OptionalExpression> --> SEMI");
            }
| exp SEMI  {
            $$=$1;
            derivations.push("<OptionalExpression> --> <exp> SEMI");
            }
;

ConditionalStatement:
IF LPAREN exp RPAREN Statement  {
                                $$=new NodeConditional($3, $5, 0);
                                derivations.push("<ConditionalStatement> --> "
                                                "IF LPAREN <exp> RPAREN "
                                                "<Statement>");
                                }
| IF LPAREN exp RPAREN Statement ELSE Statement {
                                                $$=new NodeConditional($3, $5, 
                                                                       $7);
                                                derivations.push("<ConditionalStatement>"
                                                                 " --> "
                                                                 "IF LPAREN exp"
                                                                 " RPAREN <State"
                                                                 "ment> ELSE <St"
                                                                 "atement>");
                                                }
;

exp:
name                  {
                      $$=$1;
                      derivations.push("<exp> --> <name>");
                      }
| NULLT               {
                      $$=new NodeNull();
                      derivations.push("<exp> --> NULLT");
                      }
| NUM       		      {
                      derivations.push("NUM --> " + to_string($1->getint()));
                      derivations.push("<exp> --> NUM");
                      $$=new nodeNum($1->getint()); delete $1; 
                      }
| name paramList      {
                      derivations.push("<exp> --> <name> <paramList>");
                      $$=new NodeFunct($1, $2);
                      }
| exp OR exp          {
                      $$=new NodeOr($1,$3);
                      $$->setval(" || ");
                      derivations.push("<exp> --> <exp> OR <exp>");
                      }
| exp AND exp         {
                      $$=new NodeAnd($1,$3);
                      $$->setval(" && ");
                      derivations.push("<exp> --> <exp> AND <exp>");
                      }
| exp MOD exp         {
                      $$=new NodeMod($1,$3);
                      $$->setval(" % "); 
                      derivations.push("<exp> --> <exp> MOD <exp>");
                      }
| READ LPAREN RPAREN  {
                      $$=new NodeRead();
                      derivations.push("<exp> --> READ LPAREN RPAREN");
                      }
| exp PLUS exp        { 
                      $$=new NodePlus($1,$3);
                      $$->setval(" + ");
                      derivations.push("<exp> --> <exp> PLUS <exp>");
                      }
| exp MINUS exp       { 
                      $$=new NodeMinus($1,$3);
                      $$->setval(" - ");
                      derivations.push("<exp> --> <exp> MINUS <exp>");
                      }
| exp TIMES exp       { 
                      $$=new NodeTimes($1,$3);
                      $$->setval(" * ");
                      derivations.push("<exp> --> <exp> TIMES <exp>");
                      }
| exp DIV exp         { 
                      $$=new NodeDivide($1,$3);
                      $$->setval(" / ");
                      derivations.push("<exp> --> <exp> DIV <exp>");
                      }
| UnaryOp             { 
                      $$=$1;
                      derivations.push("<exp> --> <UnaryOp>");
                      }
| LPAREN exp RPAREN   { 
                      $$=new nodeParExp($2);
                      derivations.push("<exp> --> LPAREN <exp> RPAREN");
                      }
| exp GT exp    {
                $$=new nodeComparatorExp(
                  nodeComparatorExp::Comparator::GT, $1, $3);
                derivations.push("<exp> --> <exp> GT <exp>");
                }
| exp LT exp    {
                $$=new nodeComparatorExp(
                  nodeComparatorExp::Comparator::LT, $1, $3);
                derivations.push("<exp> --> <exp> LT <exp>");
                }
| exp EQ exp    {
                $$=new NodeEquality($1, $3);
                derivations.push("<exp> --> <exp> EQ <exp>");
                }
| exp NEQ exp   {
                $$=new NodeNotEquality($1, $3);
                derivations.push("<exp> --> <exp> NEQ <exp>");
                }
| exp LEQ exp   {
                $$=new nodeComparatorExp(
                  nodeComparatorExp::Comparator::LEQ, $1, $3);
                derivations.push("<exp> --> <exp> LEQ <exp>");
                }
| exp GEQ exp   {
                $$=new nodeComparatorExp(
                  nodeComparatorExp::Comparator::GEQ, $1, $3);
                derivations.push("<exp> --> <exp> GEQ <exp>");
                }
| newexp        {
                $$=$1;
                derivations.push("<exp> --> <newexp>");
                }
;

newexp:
NEW identifier paramList              {
                                      $$=new NodeNewConstructor($2, $3);
                                      derivations.push("<newexp> --> NEW "
                                                       "<identifier> "
                                                       "<paramList>");
                                      }
| newType bracketexps multibrackets   {
                                      $$=new NodeNewExpBrack($1, $2, $3);
                                      derivations.push("<newexp> --> "
                                                       "<newType> "
                                                       "<bracketexps> "
                                                       "<multibrackets>");
                                      }
| newType bracketexps                 {
                                      $$=new nodeNewExp($1, $2);
                                      derivations.push("<newexp> --> "
                                                       "<newType> "
                                                       "<bracketexps>");
                                      }
| newType multibrackets               {
                                      $$=new NodeNewBrack($1, $2);
                                      derivations.push("<newexp> --> "
                                                       "<newType> "
                                                       "<multibrackets>");
                                      }
;

UnaryOp:
MINUS exp   {
            $$=new NodeNegative($2);
            derivations.push("<UnaryOp> --> MINUS <exp>");
            }
| PLUS exp  {
            $$=new NodePositive($2);
            derivations.push("<UnaryOp> --> PLUS <exp>");
            }
| NOT exp   {
            $$=new NodeNot($2);
            derivations.push("<UnaryOp> --> NOT <exp>");
            }
;

paramList:
LPAREN RPAREN           {
                        $$=new NodeParamList(0);
                        derivations.push("<paramList> --> LPAREN RPAREN");
                        }
| LPAREN Arglist RPAREN {
                        $$=new NodeParamList($2);
                        derivations.push("<paramList> --> LPAREN"
                                         " <Arglist> RPAREN");
                        }
;

newType:
NEW INT       {
              $$=new NodeNewType();
              derivations.push("<newType> --> NEW INT");
              }
| NEW identifier  {
              $$=new NodeNewType($2);
              derivations.push("<newType> --> NEW <identifier>");
              }
;

name:
THIS                  {
                      $$=new NodeThis();
                      derivations.push("<name> --> THIS");
                      }
| identifier          {
                      $$=$1;
                      derivations.push("<name> --> <identifier>");
                      }
| name DOT identifier {
                      $$=new nodeDot($1,$3);
                      derivations.push("<name> --> <name> DOT <identifier>");
                      }
| name bracketexp     {
                      $$=new NodeNameBrack($1,$2);
                      derivations.push("<name> --> <name> <bracketexps>");
                      }
;

type:
INT           {
              $$=new NodeType();
              derivations.push("<type> --> INT");
              }
| identifier  {
              $$=new NodeType($1);
              derivations.push("<type> --> <identifier>");
              }
| INT multibrackets   {
                      $$=new NodeType(0, $2);
                      derivations.push("<type> --> INT <multibrackets>");
                      }
| identifier multibrackets  {
                            $$=new NodeType($1, $2);
                            derivations.push("<type> --> <identifier> <multibrackets>");
                            }
;

bracketexps:
bracketexp                {
                          $$=$1;
                          derivations.push("<bracketexps> --> <bracketexp>");
                          }
| bracketexps bracketexp  {
                          $$=new Node($1,$2);
                          derivations.push("<bracketexps> --> <bracketexps>"
                                           " <bracketexp>");
                          }
;

bracketexp:
LBRACK exp RBRACK       {
                        $$=new nodeBracketExp($2);
                        derivations.push("<bracketexp> --> "
                                         "LBRACK <exp> RBRACK");
                        } 
;

multibrackets:
LBRACK RBRACK                 {
                              $$=new NodeEmptyBrackets();
                              derivations.push("<multibrackets> --> "
                                               "LBRACK RBRACK");
                              }
| multibrackets LBRACK RBRACK {
                              $$=new NodeEmptyBrackets($1);
                              derivations.push("<multibrackets> --> "
                                               "<multibrackets> "
                                               "LBRACK RBRACK");
                              }
;

identifier:
IDENT           {
                $$=new NodeIdentifier(yytext());
                string s("IDENT --> ");
                s.append(yytext());
                derivations.push(s);
                derivations.push("<identifier> --> IDENT");
                }
;
%%
